#!/usr/bin/env node

function main(a){var b=express();displayLogo();var c;if(a.forEach(function(a,b){2===b&&(Logger.info("Default config file overridden by :"),Logger.info(a),c=a)}),_.isNil(c))try{require("fs").accessSync("./mockupccino-config.yaml"),c="./mockupccino-config.yaml",Logger.info("Using default YAML config file format")}catch(d){}if(_.isNil(c))try{require("fs").accessSync("./mockupccino-config.json"),c="./mockupccino-config.json",Logger.info("Using default JSON config file format")}catch(d){}var e;if(e=new Configuration(c),e.isValid()){Logger.info("Found "+e.getEndpoints().length+" endpoints");var f=new MockupccinoServer(e,b);return f.launch(),b}Logger.error("No endpoints found..Exit")}function displayLogo(){console.log(" _______              __                           __"),console.log("|   |   |.-----.----.|  |--.--.--.-----.----.----.|__|.-----.-----."),console.log("|       ||  _  |  __||    <|  |  |  _  |  __|  __||  ||     |  _  |"),console.log("|  |_|__||_____|____||__|__|_____|   __|____|____||__||__|__|_____|"),console.log("|__| Mockupccino v1.1.0          |__|"),console.log("==================================================================="),console.log("")}var Logger=function(){function a(){}return a.log=function(a,b){var c=new Date,d="000"+c.getDate(),e=d.substring(d.length-2,d.length),f="000"+(c.getMonth()+1),g=f.substring(f.length-2,f.length),h=g+"/"+e+"/"+c.getFullYear(),i="000"+c.getHours(),j=i.substring(i.length-2,i.length),k="000"+c.getMinutes(),l=k.substring(k.length-2,k.length),m="000"+c.getSeconds(),n=m.substring(m.length-2,m.length),o="000"+c.getMilliseconds(),p=o.substring(o.length-3,o.length);console.log("["+h+" "+j+":"+l+":"+n+"."+p+"] : "+a+" : "+b)},a.info=function(b){a.log("INFO",b)},a.warning=function(b){a.log("WARNING",b)},a.error=function(b){a.log("ERROR",b)},a.debug=function(b){a.log("DEBUG",b)},a}();module.exports=Logger;var _=require("lodash"),yaml=require("js-yaml"),Configuration=function(){function a(a){this.configFile=a,this.load()}return a.prototype.load=function(){_.endsWith(this.configFile,".json")?this.configuration=this.parseJSONConfig(this.configFile):_.endsWith(this.configFile,".yaml")&&(this.configuration=this.parseYAMLConfig(this.configFile))},a.prototype.parseJSONConfig=function(a){try{return JSON.parse(require("fs").readFileSync(a,"utf8"))}catch(b){return void console.log("Unable to find or parse config file.")}},a.prototype.parseYAMLConfig=function(a){var b;try{return b=yaml.safeLoad(require("fs").readFileSync(a,"utf8")),_.isNil(b.swagger)?b:(Logger.error("Sorry the Swagger/YAML format is not yet implemented."),null)}catch(c){return console.log("Unable to find or parse config file."),null}},a.prototype.isValid=function(){return _.isNil(this.configuration)?!1:this.configuration.endpoints.length>0},a.prototype.getEndpoints=function(){return!_.isNil(this.configuration)&&this.configuration.endpoints.length>0?this.configuration.endpoints:null},a.prototype.getGlobalConfig=function(){return _.isNil(this.configuration)||_.isNil(this.configuration.global)?null:this.configuration.global},a}();module.exports=Configuration;var bodyParser=require("body-parser"),multer=require("multer"),_=require("lodash"),express=require("express"),MockupccinoServer=function(){function a(a,b){this.config=a,this.expressServer=b,this.dataCache=[]}return a.prototype.launch=function(){var a=this;this.config.load(),this.config.getEndpoints().forEach(function(b){a.addEndpoint(b)}),this.populateEndpoint(),_.isNil(this.config.getGlobalConfig())||(_.isNil(this.config.getGlobalConfig().staticContent)||this.config.getGlobalConfig().staticContent.forEach(function(b){_.isNil(b)||a.expressServer.use(b.url,express["static"](b.path))}),_.isNil(this.config.getGlobalConfig().port)?(this.expressServer.listen(3e3),Logger.info("Configuration: Server port: 3000")):(this.expressServer.listen(this.config.getGlobalConfig().port),Logger.info("Configuration: Server port: "+this.config.getGlobalConfig().port)))},a.prototype.addEndpoint=function(a){var b=this;"POST"===a.httpMethod?(this.expressServer.post(a.url,function(c,d){b.endpointCallback(a,d)}),Logger.info("   |--> Adding : POST   : "+a.url)):"PUT"===a.httpMethod?(this.expressServer.put(a.url,function(c,d){b.endpointCallback(a,d)}),Logger.info("   |--> Adding : PUT    : "+a.url)):"DELETE"===a.httpMethod?(this.expressServer["delete"](a.url,function(c,d){b.endpointCallback(a,d)}),Logger.info("   |--> Adding : DELETE : "+a.url)):(this.expressServer.get(a.url,function(c,d){b.endpointCallback(a,d)}),Logger.info("   |--> Adding : GET    : "+a.url))},a.prototype.endpointCallback=function(a,b){var c=this;Logger.debug("Endpoint Call: "+a.url);var d=this.getStatusCodeForEndPoint(a.url,a.httpMethod);null!=d&&(b.statusCode=d);var e=0;_.isNil(a.loadSim)||(e=a.loadSim),setTimeout(function(){var d;d=c.getResponseForEndpoint(a.url,a.httpMethod),b.send(d)},e)},a.prototype.getResponseForEndpoint=function(a,b){var c;return c=this.dataCache[a+"-"+b],_.isNil(c)&&(this.config.load(),this.config.getEndpoints().forEach(function(d,e,f){d.url==a&&d.httpMethod==b&&(d.responseFile?(Logger.debug(d.responseFile),c=JSON.parse(require("fs").readFileSync(d.responseFile,"utf8"))):(Logger.debug(JSON.stringify(d.response)),c=d.response))})),c},a.prototype.getStatusCodeForEndPoint=function(a,b){this.config.load();var c=500;return this.config.getEndpoints().forEach(function(d,e,f){d.url==a&&d.httpMethod==b&&(c=d.responseCode?d.responseCode:200)}),c},a.prototype.populateEndpoint=function(){var a=this,b=multer();this.expressServer.use(bodyParser.json()),this.expressServer.use(bodyParser.urlencoded({extended:!0})),this.expressServer.post("/populate",b.any(),function(b,c,d){Logger.debug(b.body),a.dataCache[b.body.url+"-"+b.body.method]=b.body.object,console.dir(a.dataCache),c.statusCode=200,c.send("")}),Logger.info("   Â°--> Adding : POST   : /populate")},a}();module.exports=MockupccinoServer;var express=require("express"),_=require("lodash");exports.App=main(process.argv),process.on("uncaughtException",function(a){"EADDRINUSE"===a.errno?Logger.error("Port already used by an other application/service"):Logger.error(a),process.exit(1)});