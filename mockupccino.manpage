.\" Manpage for mockupccino.
.\" Contact mockupccino@juery.fr to correct errors or typos.
.TH man 1 "26 april 2016" "1.0" "mockupccino man page"
.SH NAME
mockupccino \- creates a REST/JSON server simulation tool which allow developers to test their REST clients.

.SH SYNOPSIS
mockupccino [OPTIONS] [CONFIGURATIONFILE]
.SH DESCRIPTION
Mockupccino is a REST/JSON server simulation tool which allow developers to test their REST clients.

Mockupccino doesn't require any intrusive configuration into your projects, just run Mockupccino with its configuration file and that's all.
The main objective of Mockupccino is to prevent your projects from the risk of webservices connection bugs that could be caused by an intrusive faulty configuration.
Its use was thought to be as simple as possible, you just have to create a file that describes how the REST webservice must respond and launch the Mockupccino server.

.SH OPTIONS
.IP
.BR -h, --help
    output usage information
.IP
.BR -V, --version
    output the version number
.IP
.BR -p, --port\ \fIPORT\fR
    the server port
.SH CONFIGURATION FILE
The following example shows how the config file should look like:
.IP
.B JSON Format
.IP
{
    "global":{
        "port": 4000,
        "staticContent":[
            {
                "url": "/",
                "path": "/home/user/myProject/app"
            },
            {
                "url": "/styles",
                "path": "/home/user/myProject/.tmp/styles"
            }
        ]
    },
    "endpoints":[
        {
            "url": "/test1",
            "httpMethod": "GET",
            "loadSim": 5000,
            "response": {"msg":"Test1 OK", "ReturnCode":"200"}
        },
        {
            "url": "/test2",
            "httpMethod": "POST",
            "response":"Everything is OK"
        },
        {
            "url": "/test3",
            "httpMethod": "PUT",
            "response":{"msg":"Test 3 is ok also", "ReturnCode":"200"}
        },
        {
            "url": "/test4",
            "httpMethod": "DELETE",
            "responseFile": "/home/user/myProject/app/test/myTestObject.json"
        }
    ]
}
.IP
.B YAML Format
.IP
---
  global:
    port: 4000
    staticContent:
      - url: "/"
        path: "/home/user/myProject/app"

      - url: "/styles"
        path: "/home/user/myProject/.tmp/styles"

  endpoints:
    - url: "/test1"
      httpMethod: "GET"
      loadSim: 5000
      response:  {"msg":"Test1 OK", "ReturnCode":"200"}

    - url: "/test2"
      httpMethod: "POST"
      response: "Everything is OK"

    - url: "/test3"
      httpMethod: "PUT"
      response: {"msg":"Test 3 is ok also", "ReturnCode":"200"}

    - url: "/test4"
      httpMethod: "DELETE"
      responseFile: "/home/user/myProject/app/test/myTestObject.json"
.IP
In this file, you can find 2 main sections: the global section and the endpoints section.
.IP
.B The `global` section
.IP
In this section, you can set the server port and the staticContent that should served by the server:
.IP
- `port`: (Mandatory) mockupccino server port
.IP
- `staticContent`: (Optional) Array of `path` that should be served as soon as the given `url` is requested.
.IP
.B The `endpoints`section
.IP
This section is an array of the different endpoints that should be exposed by the server:
.IP
- `url`: (Mandatory) endpoint's url exposed by the server
.IP
- `httpMethod`: (Mandatory) endpoint's HTTP method
.IP
- `response`: Response that Mockupcino should answer for a given url
- `responseFile`: path of the file where the response is set.
- `loadSim`: (Optional) Amount of milliseconds the Mockupccino server will wait in order to simulate a average server response time.

Pay attention, there should be at least, and no more than, one of the response* attribute.

.SH SEE ALSO
https://github.com/xjuery/Mockupccino
.SH BUGS
No known bugs, but, please, report to https://github.com/xjuery/Mockupccino if you find some.
.SH AUTHOR
Xavier JUERY (xavier@juery.fr)